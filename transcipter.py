# -*- coding: utf-8 -*-
"""Transcipter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZqBR3zUHcaRXVVoKlmUVBm9ukVJo2GyA
"""

pip install python-docx

from docx import Document
from docx.shared import Pt
import re

# Replace 'input-file.docx' with the actual file name
file_path = ('/content/input-file.docx')

def read_docx(file_path):
    doc = Document(file_path)
    content = []

    for paragraph in doc.paragraphs:
        content.append(paragraph.text)

    return '\n'.join(content)

# text_content = read_docx(file_path)
# print(text_content)

def detect_all_speakers(docx_text_content):

    # Define a regular expression pattern to match lines that represent a potential speaker
    speaker_pattern = re.compile(r'^([A-Za-z0-9\$\s]+)$', re.MULTILINE)

    # Find all matches in the document text
    potential_speakers = re.findall(speaker_pattern, docx_text_content)

    return set(potential_speakers)

def prompt_user_for_speaker_confirmation(potential_speakers):
    confirmed_speakers = []

    print("Potential speakers detected:")
    for speaker in potential_speakers:
        user_input = input(f"Is '{speaker}' a speaker? (y/n): ").lower()
        if user_input == 'y':
            confirmed_speakers.append(speaker)

    return confirmed_speakers

def format_text(docx_text_content, confirmed_speakers):

    # Split the text into lines
    lines = docx_text_content.split('\n')
    formatted_lines = []
    current_speaker = None

    for line in lines:

        # Check if the line matches the confirmed speaker pattern
        if line.strip() in confirmed_speakers:

            # If a confirmed speaker is detected, format the text and update the current speaker
            current_speaker = line.strip()
            formatted_lines.append(f"\n{current_speaker}")

        else:
            # If no confirmed speaker is detected, append the line as it is
            formatted_lines.append(line)

    # Join the formatted lines to get the final result
    formatted_text = '\n'.join(formatted_lines)

    return formatted_text

def create_formatted_docx(output_file_path, formatted_text):
    doc = Document()
    style = doc.styles['Normal']

    # Set font / size
    font = style.font
    font.name = 'Barlow'
    font.size = Pt(11)

    # Set space_after
    style.paragraph_format.space_after = Pt(0)

    # Add paragraphs to the document
    for line in formatted_text.split('\n'):

        # Bold speakers
        if line.strip() in confirmed_speakers:
          paragraph = doc.add_paragraph()
          paragraph.add_run(line).bold = True

        # Non-speaker lines
        else:
          paragraph = doc.add_paragraph(line)

    # Save the document
    doc.save(output_file_path)

# Read Document
docx_text_content = read_docx(file_path)

# Detect all potential speakers in the document
potential_speakers = detect_all_speakers(docx_text_content)

# Print the list of detected speakers
print("Detected potential speakers:")
for speaker in potential_speakers:
    print(f"- {speaker}")

# Prompt the user for confirmation
confirmed_speakers = prompt_user_for_speaker_confirmation(potential_speakers)

# Format the text based on confirmed speakers
formatted_text = format_text(docx_text_content, confirmed_speakers)

# Replace with the desired output file name
output_file_path = 'formatted_output.docx'
create_formatted_docx(output_file_path, formatted_text)

print(f"The formatted text has been saved to {'/content/'}.")

